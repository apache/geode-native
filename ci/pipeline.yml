#! helm upgrade concourse concourse/concourse --set web.service.api.type=LoadBalancer,concourse.web.externalUrl=http://35.222.132.46:8080
#! ~/Downloads/fly -t test set-pipeline -p test -c ../../ci/pipeline.yml
#! kubectl create secret generic gcr-json-key --from-literal "value=$(cat ~/Downloads/gemfire-dev-6e8864f0768c.json)" --namespace=concourse-main

#@ load("remote.lib.txt", "remote_shell", "remote_build_variables", "run_unit_tests", "run_integration_tests", "run_legacy_integration_tests")
#@ load("@ytt:data", "data")

#@ def resource(name, type, source, icon=None):
name: #@ name
type: #@ type
source: #@ source
icon: #@ icon
#@ end

#@ def docker_image_resource(name, repository, tag="latest", username=None, password=None):
#@ return resource(name, "docker-image", {
#@   "repository": repository,
#@   "tag": tag,
#@   "username": username,
#@   "password": password
#@  }, "docker")
#@ end

#@ def gcr_image_resource(name, repository, tag="latest"):
#@ return docker_image_resource(name, repository, tag, "_json_key", "((gcr-json-key))")
#@ end

#@ def git_resource(name, uri, branch, paths=[], depth=1):
#@ return resource(name, "git", {
#@   "branch": branch,
#@   "depth": depth,
#@   "paths": paths,
#@   "uri": uri
#@  }, "github")
#@ end

#@ def gci_resource_name(family):
#@ return family + "-gci"
#@ end

#@ def gci_resource(family):
#@ return resource(gci_resource_name(family), "gci", {
#@   "key": "((gcr-json-key))",
#@   "family_project": "gemfire-dev",
#@   "family": family,
#@  }, "google-cloud")
#@ end

#@ def create_instance(image_family):
task: create
image: task-image
config:
  platform: linux
  inputs:
    - name: #@ gci_resource_name(image_family)
      path: image
  outputs:
    - name: identity
    - name: instance
  params:
    BUILD_IMAGE_FILE: image/name
    BUILD_IMAGE_FAMILY: #@ image_family
  run:
    path: bash
    args:
      - -c
      #@yaml/text-templated-strings
      - |
        set -ueo pipefail
        (@= remote_build_variables() @)

        BUILD_PREFIX=${BUILD_PREFIX:-build}
        BUILD_INSTANCE=${BUILD_INSTANCE:-"${BUILD_PREFIX}-$(uuidgen|tr '[:upper:]' '[:lower:]')"}
        BUILD_SUBNET=${BUILD_SUBNET:-default}
        BUILD_IMAGE_PROJECT=${BUILD_IMAGE_PROJECT:-${BUILD_PROJECT}}
        BUILD_IMAGE=${BUILD_IMAGE:-''}
        BUILD_IMAGE_FILE=${BUILD_IMAGE_FILE:-''}
        BUILD_IMAGE_FAMILY=${BUILD_IMAGE_FAMILY:-''}

        if [ -z "${BUILD_IMAGE}" ]; then
          if [ -n "${BUILD_IMAGE_FILE}" ]; then
            BUILD_IMAGE=$(cat ${BUILD_IMAGE_FILE})
          elif [ -n "${BUILD_IMAGE_FAMILY}" ]; then
            BUILD_IMAGE=$(gcloud compute images describe-from-family ${BUILD_IMAGE_FAMILY} --project=${BUILD_IMAGE_PROJECT} --format 'value(name)')
          fi
        fi

        if [ -z "${BUILD_IMAGE}" ]; then
          echo "No build image."
          exit 1;
        fi

        ssh_key_file=${BUILD_IDENTITY_DIR}/${BUILD_USER}
        ssh_pubkey_file=${ssh_key_file}.pub
        ssh-keygen -m pem  -t rsa -f ${ssh_key_file} -C ${BUILD_USER} -N '' <<< y
        ssh_pubkey=$(cat ${ssh_pubkey_file})

        ssh_keys_file=${BUILD_IDENTITY_DIR}/ssh_keys_file
        echo "${BUILD_USER}:${ssh_pubkey}" > ${ssh_keys_file}

        instance_file=${BUILD_INSTANCE_DIR}/instance.json
        gcloud compute instances create ${BUILD_INSTANCE} \
            --format json \
            --project=${BUILD_PROJECT} \
            --zone=${BUILD_ZONE} \
            --subnet=${BUILD_SUBNET} \
            --machine-type=e2-standard-16 \
            --boot-disk-size=200GB \
            --boot-disk-type=pd-standard \
            --boot-disk-device-name=${BUILD_INSTANCE} \
            --image-project=${BUILD_IMAGE_PROJECT} \
            --image-family=${BUILD_IMAGE_FAMILY} \
            --metadata-from-file ssh-keys=${ssh_keys_file} \
            | tee ${instance_file}

        (@=remote_shell() @)

        echo "ssh ${SSH_OPTIONS} -i ${ssh_key_file} ${BUILD_USER}@${external_ip}"
#@ end

#@ def await_instance():
task: await
image: task-image
config:
  platform: linux
  inputs:
    - name: identity
    - name: instance
  params:
  run:
    path: bash
    args:
      - -c
      #@yaml/text-templated-strings
      - |
        set -ueo pipefail
        (@=remote_shell() @)
        SSH_OPTIONS="${SSH_OPTIONS} -o ConnectTimeout=10"

        instance_name=$(jq -r '.[0].name' ${instance_file})

        echo "Waiting for ssh on ${instance_name} to be ready."
        console_file=$(mktemp)
        console_next=0
        while ! remote_shell echo ready 2>/dev/null ; do
          gcloud compute instances get-serial-port-output ${instance_name} \
              --start ${console_next} \
              --project=${BUILD_PROJECT} \
              --zone=${BUILD_ZONE} \
              --format json \
              > ${console_file}

          console_next=$(jq -r '.next' ${console_file})
          console_contents=$(jq -r '.contents' ${console_file})
          if [ ! -z "${console_contents}" ]; then
            echo -n "${console_contents}"
          fi
        done

        rm -f ${console_file}
#@ end

#@ load("@ytt:template", "template")

#@ def build(config, params={}):
task: build
image: task-image
config:
  platform: linux
  inputs:
    - name: identity
    - name: instance
    - name: source
  outputs:
    - name: package
  params:
    _: #@ template.replace(params)
    _: #@ template.replace({"CMAKE_CONFIG": config})
  run:
    path: bash
    args:
      - -c
      #@yaml/text-templated-strings
      - |
        set -ueo pipefail

        (@= remote_shell() @)

        pushd source
        git_url=$(git remote get-url origin)
        git_rev=$(git rev-parse HEAD)
        popd

        remote_shell git clone ${git_url}
        remote_shell cmake -E chdir geode-native git checkout ${git_rev}
        remote_shell cmake -E make_directory build
        remote_shell cmake -E chdir build cmake ../geode-native ${CMAKE_CONFIGURE_FLAGS} -DCMAKE_config=${CMAKE_CONFIG}
        remote_shell cmake --build build --config ${CMAKE_CONFIG} -- ${CMAKE_BUILD_FLAGS}
        remote_shell cmake --build build --config ${CMAKE_CONFIG} --target docs -- ${CMAKE_BUILD_FLAGS}
        remote_shell cmake -E chdir build cpack -C ${CMAKE_CONFIG} -G "${CPACK_GENERATORS}"

        #scp -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i ${ssh_key_file} ${BUILD_USER}@${external_ip}:build/*.zip package/
#@ end

#@ def remote_task(name, config, commands, timeout, params={}):
task: #@ name
timeout: #@ timeout
image: task-image
attempts: 5
config:
  platform: linux
  inputs:
    - name: identity
    - name: instance
  outputs:
  params:
    _: #@ template.replace(params)
    _: #@ template.replace({"CMAKE_CONFIG": config})
  run:
    path: bash
    args:
      - -c
      #@yaml/text-templated-strings
      - |
        set -ueo pipefail
        (@= remote_shell() @)
        (@= commands @)
#@ end

#@ def delete_instance():
task: delete
image: task-image
config:
  platform: linux
  inputs:
    - name: identity
    - name: instance
  params:
  run:
    path: bash
    args:
      - -c
      #@yaml/text-templated-strings
      - |
        set -ueo pipefail
        (@= remote_shell() @)

        instance_name=$(jq -r '.[0].name' ${instance_file})

        gcloud compute instances delete ${instance_name} \
            --project=${BUILD_PROJECT} \
            --zone=${BUILD_ZONE} \
            --delete-disks=all \
            --quiet
#@ end

#@ def build_job(name, config, image_family, params):
name: #@ "build-" + name + "-" + config
plan:
  - get: task-image
  - get: source
  - get: #@ gci_resource_name(image_family)
  - do:
      - #@ create_instance(image_family)
      - #@ await_instance()
      - #@ build(config, params)
      - #@ remote_task("unit-tests", config, run_unit_tests(), "5m", params)
      - #@ remote_task("integration-tests", config, run_integration_tests(), "30m", params)
      - #@ remote_task("legacy-integration-tests", config, run_legacy_integration_tests(), "2h", params)
    ensure: #@ delete_instance()
#@ end

#! TODO data
#@ geode_native_uri = "http://github.com/pivotal-jbarrett/geode-native.git"
#@ geode_native_branch = "wip/images-gcp"
#@ windows_build_params = {
#@   "CMAKE_CONFIGURE_FLAGS": "-A x64 -Thost=x64",
#@   "CMAKE_BUILD_FLAGS": "/m",
#@   "CPACK_GENERATORS": "ZIP"
#@ }
#@ linux_build_params = {
#@   "CMAKE_CONFIGURE_FLAGS": "",
#@   "CMAKE_BUILD_FLAGS": "-j8",
#@   "CPACK_GENERATORS": "TGZ"
#@ }

resource_types:
  - name: gci
    type: docker-image
    source:
      repository: smgoller/gci-resource

resources:
  - #@ gcr_image_resource("task-image", "gcr.io/gemfire-dev/gemfire-develop-alpine-tools")
  - #@ git_resource("source", geode_native_uri, geode_native_branch)
  #!  - #@ git_resource("ci", geode_native_uri, geode_native_branch, ["ci/*"])
  - #@ gci_resource("jbarrett-10-2-build-windows-2019-vs-2017")
  - #@ gci_resource("jbarrett-10-2-build-rhel-7")
  - #@ gci_resource("jbarrett-10-2-build-rhel-8")
  - #@ gci_resource("jbarrett-10-2-build-ubuntu-16-04")
  - #@ gci_resource("jbarrett-10-2-build-ubuntu-18-04")

jobs:
  #@ for config in ["Debug", "RelWithDebInfo"]:
  - #@ build_job("windows", config, "jbarrett-10-2-build-windows-2019-vs-2017", windows_build_params)
  - #@ build_job("rhel-7", config, "jbarrett-10-2-build-rhel-7", linux_build_params)
  - #@ build_job("rhel-8", config, "jbarrett-10-2-build-rhel-8", linux_build_params)
  - #@ build_job("ubuntu-16-04", config, "jbarrett-10-2-build-ubuntu-16-04", linux_build_params)
  - #@ build_job("ubuntu-18-04", config, "jbarrett-10-2-build-ubuntu-18-04", linux_build_params)
  #@ end
