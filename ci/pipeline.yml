#! helm upgrade concourse concourse/concourse --set web.service.api.type=LoadBalancer,concourse.web.externalUrl=http://35.222.132.46:8080
#! ~/Downloads/fly -t test set-pipeline -p test -c ../../ci/pipeline.yml
#! kubectl create secret generic gcr-json-key --from-literal "value=$(cat ~/Downloads/gemfire-dev-6e8864f0768c.json)" --namespace=concourse-main

#@ load("templates.lib.yml",
#@      "gcr_image_resource",
#@      "git_resource",
#@      "gci_resource",
#@      "docker_image_resource",
#@      "image_family_name",
#@      "build_job",
#@      "packer_job",
#@      "repository_url")
#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:struct", "struct")

#@ def extends_build(build):
#@ return struct.make(**overlay.apply(data.values.default.build, build))
#@ end

resource_types:
  - name: gci
    type: docker-image
    source:
      repository: smgoller/gci-resource

resources:
  - #@ gcr_image_resource("task-image", "gcr.io/gemfire-dev/gemfire-develop-alpine-tools")
  - #@ docker_image_resource("packer-image", "hashicorp/packer")
  - #@ docker_image_resource("ytt-image", "gerritk/ytt")
  - #@ git_resource("source", repository_url(data.values.repository), data.values.repository.branch, ignore_paths=["ci/*", "packer/*"])
  - #@ git_resource("ci-source", repository_url(data.values.repository), data.values.repository.branch, ["ci/*"])
  - #@ git_resource("packer-source", repository_url(data.values.repository), data.values.repository.branch, ["packer/*"])
  #@ for build in data.values.builds:
  - #@ gci_resource(image_family_name(extends_build(build).image_family), "gemfire-dev")
  - #@ gci_resource(extends_build(build).source_image_family, "gemfire-dev")
    #@ end

jobs:
  #@ for build in data.values.builds:
  #@ for/end config in data.values.configs:
  - #@ build_job(extends_build(build), config)
  - #@ packer_job(extends_build(build))
  #@ end
  - name: set-pipeline
    serial: true
    plan:
      - in_parallel:
          fail_fast: true
          steps:
            - get: ytt-image
            - get: ci-source
              trigger: true
      - task: ytt
        image: ytt-image
        config:
          platform: linux
          inputs:
            - name: ci-source
              path: source
          outputs:
            - name: pipeline
          params:
          run:
            path: /usr/bin/ytt
            args:
              - --file
              - source/ci/.
              - --output-files
              - pipeline/
      - set_pipeline: test
        file: pipeline/pipeline.yml
