#! Licensed to the Apache Software Foundation (ASF) under one or more
#! contributor license agreements.  See the NOTICE file distributed with
#! this work for additional information regarding copyright ownership.
#! The ASF licenses this file to You under the Apache License, Version 2.0
#! (the "License"); you may not use this file except in compliance with
#! the License.  You may obtain a copy of the License at
#!
#!      http://www.apache.org/licenses/LICENSE-2.0
#!
#! Unless required by applicable law or agreed to in writing, software
#! distributed under the License is distributed on an "AS IS" BASIS,
#! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#! See the License for the specific language governing permissions and
#! limitations under the License.

#@ load("templates.lib.yml",
#@      "resource_type",
#@      "gcr_image_resource",
#@      "project_gcr_image_resource",
#@      "git_resource",
#@      "registry_image_resource",
#@      "semver_resource",
#@      "build_resources",
#@      "build_jobs",
#@      "build_job_name",
#@      "update_pipeline_job",
#@      "update_pipeline_job_name")
#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

---
resource_types:
  - #@ resource_type("gci-resource", "smgoller/gci-resource")
  - #@ resource_type("gcs-resource", "frodenas/gcs-resource")
  - name: apache-directory-index
    type: docker-image
    source:
      repository: mastertinner/apache-directory-index-resource

resources:
  - #@ semver_resource("version", "1.14.0-build.0")
  - #@ gcr_image_resource("gcloud-image", "google.com/cloudsdktool/cloud-sdk", "alpine")
  - #@ project_gcr_image_resource("task-image", "geode-native-task")
  - #@ project_gcr_image_resource("clang-tools-image", "geode-native-clang-tools")
  - #@ git_resource("source", data.values.repository.url, data.values.repository.branch, ignore_paths=["ci/*", "packer/*"])
  - #@ template.replace(build_resources(data.values.builds, data.values.configs))
  - #@ registry_image_resource("ytt-image", "gerritk/ytt")
  - #@ git_resource("ci-source", data.values.repository.url, data.values.repository.branch, ["ci/*"])
  - name: geode-archive
    type: apache-directory-index
    source:
      directory: https://archive.apache.org/dist/geode/
      folder_pattern: $VERSION
      file_pattern: apache-geode-$VERSION.tgz

jobs:
  - #@ template.replace(build_jobs(data.values.builds, data.values.configs))
  - name: check-source
    plan:
    - in_parallel:
        fail_fast: true
        steps:
          - get: clang-tools-image
          - get: source
            trigger: true
          - do:
            - in_parallel:
                fail_fast: true
                steps:
                  - get: geode-archive
                  - get: task-image
            - task: extract-geode
              image: task-image
              config:
                platform: linux
                inputs:
                  - name: geode-archive
                outputs:
                  - name: geode
                params:
                run:
                  path: bash
                  args:
                    - -c
                    #@yaml/text-templated-strings
                    - |
                      set -xueo pipefail
                      tar -zxf geode-archive/apache-geode-*.tgz -C geode --strip-components=1
    - in_parallel:
        steps:
          - task: clang-tidy
            image: clang-tools-image
            config:
              platform: linux
              inputs:
                - name: source
                - name: geode
              outputs:
                - name: build
              run:
                path: bash
                args:
                  - -c
                  #@yaml/text-templated-strings
                  - |
                    set -xueo pipefail
                    export GEODE_HOME=$(pwd)/geode
                    cd build
                    cmake ../source -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
                    cmake --build dependencies --parallel $(nproc)
                    run-clang-tidy -j $(nproc) -quiet
          - task: clang-format
            image: clang-tools-image
            config:
              platform: linux
              inputs:
                - name: source
                - name: geode
              outputs:
                - name: build
              run:
                path: bash
                args:
                  - -c
                  #@yaml/text-templated-strings
                  - |
                    set -xueo pipefail
                    export GEODE_HOME=$(pwd)/geode
                    cd build
                    cmake ../source -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
                    jq -r '.[].file' compile_commands.json | sort | uniq | xargs clang-format --dry-run -Werror

  - #@ update_pipeline_job()

groups:
  - name: builds
    jobs:
      #@ for build in data.values.builds:
      #@ for/end config in data.values.configs:
      - #@ build_job_name(build, config)
      #@ end
      - check-source
  - name: meta
    jobs:
      - #@ update_pipeline_job_name()
  - name: all
    jobs:
      - #@ update_pipeline_job_name()
        #@ for build in data.values.builds:
      #@ for/end config in data.values.configs:
      - #@ build_job_name(build, config)
      #@ end
      - check-source
