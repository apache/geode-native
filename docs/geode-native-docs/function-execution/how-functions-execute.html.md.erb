---
title:  How Functions Execute
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

This section discusses the basic function execution process, how highly available functions execute after a failure, and the execution scenarios for data-dependent and data-independent functions.

## <a id="how-functions-execute__section_B3311A9E6A9243BB8403BFD3B488B840" class="no-quick-link"></a>How Functions Execute

1.  The calling client application runs the `execute` method on the `Execution` object. The object must already be registered on the servers.
2.  The function is invoked on all servers where it needs to run. The locations are determined by the `FunctionService                         on*` method calls, region configuration, and any filters.
3.  If the function has results, the result is returned to the `AddResult` method call in a `ResultCollector` object.
4.  The client collects results using the result collector `getResult`.

## <a id="how-functions-execute__section_08C66E4B3D934ADC8587DF1E3766C9FD" class="no-quick-link"></a>How Highly Available Functions Execute after a Failure

If a failure occurs in function execution, the error is returned to the calling application. You can code for high availability for `onRegion` functions that return a result, so the function is automatically retried. For information on setting this up on the server side, see [Executing a Function in Apache Geode](geodeman/developing/function_exec/function_execution.html). To use a highly available function, the client must call the results collector `getResult` method. When an execution error occurs or a member crashes while executing, the system does the following:

1.  Waits for all calls to return.
2.  Sets a boolean indicating a reexecution is being done.
3.  Calls the result collector’s `clearResults` method.
4.  Executes the function.

The system retries the execution up to the number specified in the server pool’s `retryAttempts` setting. If the function continues to fail, the final exception is returned to the `getResult` method.

## <a id="how-functions-execute__section_CD9A1A997259413EAB4E2A31E773EF3D" class="no-quick-link"></a>Data-Independent Function Execution

The figure shows the sequence of events for a data-independent function executed against all available servers.

<a id="how-functions-execute__fig_542AF21D578C4203B0E412B79AAFCB2B"></a>

<span class="figtitleprefix">Figure: </span>Data-Independent Function Invoked from a Client

<img src="../common/images/data-indep-func-from-client.gif" alt="Data-Independent Function Invoked on All Servers" id="how-functions-execute__image_E0558B648AC0408AA8EBA1B20BBDA6E8" class="image" />

## <a id="how-functions-execute__section_2B8EF74570294EDA9468303E6ABF1589" class="no-quick-link"></a>Data-Dependent Function Execution

The figure shows a data-dependent function run by a client. The specified region is connected to the server system, so the function automatically goes there to run against all servers holding data for the region.

<a id="how-functions-execute__fig_AB2806066EBD4A9A818C1CB96969AAD7"></a>

<span class="figtitleprefix">Figure: </span>Data-Dependent Function Invoked From a Client

<img src="../common/images/data-dep-func-from-client.gif" alt="Data-Dependent Function Invoked from a Client" id="how-functions-execute__image_2FC4D817034841748BA05E2805D0BC21" class="image" />

This shows the same data-dependent function with the added specification of a set of keys on which to run. Servers that don't hold any of the keys are left out of the function execution.

<a id="how-functions-execute__fig_BAD8AB0EC37C4EC1AC78FB47D071AACC"></a>

<span class="figtitleprefix">Figure: </span>Data-Dependent Function with Filter Invoked from a Client

<img src="../common/images/data-dep-func-with-filter.gif" alt="Data-Dependent Function with Filter Invoked From a Client" id="how-functions-execute__image_E2C4F2E946204ED6999504E720EA5825" class="image" />

This scenario demonstrates the steps in a call to a highly available function. The call fails the first time on one of the participating servers and is successfully run a second time on all servers.

<a id="how-functions-execute__fig_8178E71A5AD747C794A336C86BE313B8"></a>

<span class="figtitleprefix">Figure: </span>Highly Available Data-Dependent Function with Failure on First Executions

<img src="../common/images/ha-data-dep-func.gif" alt="Highly Available Data Dependent Function with Failure on First Execution" id="how-functions-execute__image_79E33270ADD147F780E5E20A03D9F3C6" class="image" />
