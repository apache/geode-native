---
title:  Installing the Client
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

To install the Geode Client, you build the client libraries from a source distribution.
To build the client libraries:

  1. Download the source distribution.
  2. Install prerequisites and tools.
  3. Build and install the client libraries.

# Download the Source Distribution

Download Geode Client sources from the [Releases page of the Apache Geode
website](http://geode.apache.org/releases/) and unpack the archive in a location of your choice.
For example, if your downloaded archive is named `apache-geode-src-1.1.0.tar.gz` and your target
directory is represented by _geode-client-installdir_:

  ```
  $ cd geode-client-installdir
  $ tar xvzf ~/Downloads/apache-geode-src-1.1.0.tar.gz
  x ./
  x ./geode-native
  x ./BUILDING.md
  x ./LICENSE
  x ./README.md
  ...
  ```

Be sure to review the `BUILDING.md` file in the top-level directory of your source release for build
information and `README.md` for general information.

# Prerequisites

In order to build the Geode Client libraries, your system must provide certain prerequisites:

  - Compatible operating system
  - Apache Geode
  - CMake
  - C++11 compiler
  - Doxygen
  - Optional tools

See the following sections for details.

## Operating Systems

The following operating systems are known to be compatible with the Apache Geode Client. 
The list is not exhaustive, others may also work.

| Operating System | Version |
|------------------|---------|
| Linux            | RHEL/CentOS 7 |
|                  | SLES 12 |
|                  | Windows 10 64-bit |
|                  | Windows Server 2012 64-bit |
|                  | Windows Server 2012 R2 64-bit |
| macOS            | MacOS 10.12 (Sierra) |
| Solaris          | Solaris 11 SPARC |
|                  | Solaris 11 x86 |


## Geode

Building the client libraries requires access to an installation of Geode. Geode libraries are referenced during the
client build process, and the Geode executables are needed if you wish to run examples and tests. 

If the `GEODE` environment variable is defined, CMake uses it to determine the location of your Geode installation.
Otherwise, CMake searches some system-specific default locations. To explicitly specify the location in which Geode
is installed, define `GEODE_ROOT=/path/to/geode` in your initial `cmake` configuration command.

## CMake

CMake version 3.4 or newer is required to build the Geode client and its QuickStart examples. To download and install
CMake, follow the instructions on [cmake.org] (https://cmake.org).

CMake uses a "generator" to produce configuration files for use by a variety of build tools, such as
Unix makefiles or Visual Studio projects. By default a system-specific generator is used by CMake
during configuration. (Please see [the CMake documentation](https://cmake.org/documentation/) for
further information.) However, in some cases there is a better choice.
      
| System        | Recommended CMake Generator
|---------------|------------------------------|
| Windows       | Visual Studio 12 2013 Win64  |
| Mac           | XCode                        |

Specify the generator with the -G option. For example, on Windows:

  ```
  $ cmake -G "Visual Studio 12 2013 Win64" ../src
  ```

When you specify a generator in the cmake configuration step, cmake will usually require that you
also specify a config type of "Debug" or "Release" in subsequent build steps, using the cmake
`--config` command-line option. For example, when building for Windows, if you specify the code
generator (usually "Visual Studio 12 2013 Win64") in the configuration step and the config type
("Debug" or "Release") in any build steps, the command sequence would look something like this:

<code>
\> cmake -G "Visual Studio 12 2013 Win64" %GFCPP%\SampleCode\quickstart\csharp<br />
... configures cmake<br />
\> cmake --build . --config Release<br />
... builds the target
</code>





## C++11 Compiler
Integrated development environments (IDEs) for various systems usually include the compilers that you need.
This table shows recommended versions for some of the most popular systems.

| System        | IDE / Compiler| Version
|---------------|---------------|---------------|
| Linux         | GCC           | [4.9](https://gcc.gnu.org) or newer |
| Windows       | Visual Studio | [2013](https://www.visualstudio.com) or newer |
| Mac           | XCode         | [8.2.1](https://developer.apple.com/xcode/download/) or newer |
| Solaris       | Solaris Studio |[12.4](http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/index-jsp-141149.html) or newer | 


## Doxygen

[Doxygen 8.11](http://www.stack.nl/~dimitri/doxygen/download.html) is needed for building source documentation.

## Optional Build Environment Tools

The CMake utility performs much of the configuration required to build and install the client libraries.

You may find some optional tools to be helpful in certain environments. Here are some that might be useful.

| System        | Optional Tool |
|---------------|---------------|
| Linux         | [Eclipse CDT 8.8](https://eclipse.org/cdt/) or newer |
| Mac           | [CMake GUI](https://cmake.org/files/v3.4/cmake-3.4.3-Darwin-x86_64.dmg) |
|               | [Doxygen GUI](http://ftp.stack.nl/pub/users/dimitri/Doxygen-1.8.11.dmg) |

&nbsp;

# Build and Install

The Geode source distribution comes with CMake files for building and installing the client libraries.

CMake uses a default system-specific location as the destination of the `install` target, for
example, `/usr/local` on Unix systems. (On Unix systems, you may need to execute your `cmake`
commands using `sudo` to allow CMake to write output files to protected locations, such as
`/usr/local`.) To explicitly specify the location in which the Geode Client will be installed,
define `CMAKE_INSTALL_PREFIX=/install-destination` in the initial `cmake` configuration command.

**Note:** For consistent results, avoid using the "~" (tilde) abbreviation when specifying paths on the CMake command line.
Interpretation of the symbol varies depending on the option being specified, and on the system or command shell in use.

To build and install the client libraries:

  1. Create a build directory and set it as the current working directory.

    ```
    $ cd geode-client-installdir
    $ mkdir build
    $ cd build
    ```

  2. Run CMake to configure the system for the CMake commands that follow. Specify any environment variables
  on this first CMake command line. In its simplest form, the configuration command specifies only the location of the
  CMake templates:

    ```
    $ cmake ../src
    ```

    In this example, the command includes a pointer to Geode and an installation destination:

    
    ```
    $ cmake -DGEODE_ROOT=/geode-installdir -DCMAKE_INSTALL_PREFIX=/installation-destination ../src
    ```

  3. Run CMake to perform the build.

    ```
    $ cmake --build .
    ```

  4. Run CMake to build the documentation.

    ```
    $ cmake --build . --target docs
    ```

  5. Run Cmake to perform the installation.

    ```
    $ cmake --build . --target install
    ```


