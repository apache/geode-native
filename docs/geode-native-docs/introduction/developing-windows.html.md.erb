---
title:  Developing C++ Programs on Windows
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

Geode uses the Visual Studio 2010 Service Pack 1 compiler for C++ programs on Windows, which invokes Microsoft<sup>Â®</sup> `cl.exe` from the command line at compile time.

The Geode client supports .NET 4.0 and Visual Studio 2010. For advantages and more information on the features of .NET 4.0 and Visual Studio 2010 SP1, see [http://msdn.microsoft.com/en-us/library/dd831853(v=vs.100).aspx](http://msdn.microsoft.com/en-us/library/dd831853(v=vs.100).aspx) and [http://msdn.microsoft.com/en-us/library/vstudio/w0x726c2(v=vs.100).aspx](http://msdn.microsoft.com/en-us/library/vstudio/w0x726c2(v=vs.100).aspx).

Visual Studio 2010 SP1 is the recommended compiler. If you are using any other compiler, contact technical support for assistance.

**Note:** When compiling external projects or applications that are used or referenced by the client, make sure that you compile them for the same target architecture as your client installation. For example, if you installed the 32-bit (x86) version of the client, compile your external projects for 32-bit (x86) architecture.

## <a id="developing-windows__section_6BFD4982A7144301A03F948CFF953AFD" class="no-quick-link"></a>Step 1. Set Up Environment Variables

After you have built the client libraries on  Windows, perform these tasks:

-   Set the *GEODE* environment variable to *product-dir*, where *product-dir* is the path to the client product directory.
-   Add the *%GEODE%\\bin* executable directory to the Windows PATH environment variable.

## <a id="developing-windows__section_0BF2BE9A38BC40D1B9FAD2AC8DBFAB0E" class="no-quick-link"></a>Step 2. Choose 32-bit or 64-bit Command-line Prompt

For 32-bit:

Start &gt; Programs &gt; Microsoft Visual Studio &gt; 2010 &gt; Visual Studio Tools &gt; Visual Studio 2010 Command Prompt

For 64-bit:

Start &gt; Programs &gt; Microsoft Visual Studio 2010 &gt; Visual Studio Tools &gt; Visual Studio 2010 x64 Win64 Command Prompt

To build using the Microsoft Visual Studio Interface, from the Solutions Platform, choose **Win32** or **x86** from the Build menu for 32-bit builds or x64 for a 64-bit build.

## <a id="developing-windows__section_597B20DBE5FD4F66A6BCB2A09C04C9C9" class="no-quick-link"></a>Step 3. Compile C++ Clients and Dynamically Link Them to Client Library

The following table lists the compiler and linker switches that must be present on the `cl.exe` command line.

**Note:**
If you want to use the Visual Studio user interface instead of invoking `cl.exe` from the command line, be sure to supply these parameters.

<a id="developing-windows__table_1FE5C01E91424CE9906CA1D0210B1237"></a>

| Argument                          | Explanation                                                                                                           |
|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------|
| `/MD`                             | Memory model.                                                                                                         |
| `/EHsc`                           | Catches C++ exceptions only and tells the compiler to assume that \*extern\* C functions never throw a C++ exception. |
| `/GR`                             | Runtime type information.                                                                                             |
| `-I%GEODE%\include`               | Specifies the Geode `include` directory.                                                 |
| `%GEODE%\lib\gfcppcache.lib`      | Specifies the library file for the shared library.                                                                    |
| `/D_CRT_SECURE_NO_DEPRECATE`      | Suppresses warnings. Required for Visual Studio 2010.                                                                 |
| `/D_CRT_NON_CONFORMING_SWPRINTFS` | Suppresses warnings. Required for Visual Studio 2010.                                                                 |


## <a id="developing-windows__section_B66588EC7C6F4D9BA772406CFD5F3EAE" class="no-quick-link"></a>Step 4. Verify that You Can Load the Client Library

Because Geode does not provide a library that can be linked statically into an application on Windows, you must dynamically link to the client library.

To make the client library available for loading, verify that the directory <code>_product-dir_/bin</code> is included in the PATH environment variable, where *product-dir* is the path to the Geode product directory.
