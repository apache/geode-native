---
title:  Developing C++ Programs on Solaris
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

This section describes how to build and run a client application on Solaris.

## <a id="developing-solaris__section_B518757C7D7A405F9E43C1232C2D6B56" class="no-quick-link"></a>Step 1. Set Environment Variables

**Note:** When compiling external projects or applications that are used or referenced by the client, make sure that you compile them for the same target architecture as your client installation. For example, if you installed the 32-bit (x86) version of the client, compile your external projects for 32-bit (x86) architecture.

Set the client environment variables on each Solaris host. For each case, *product-dir* is the path to the client product directory.

**For Bourne and Korn shells (sh, ksh, bash)**

<code>
GEODE=_product-dir_; export GEODE<br />
PATH=$GEODE/bin:$PATH;export PATH<br />
LD\_LIBRARY\_PATH=$GEODE/lib:$LD\_LIBRARY\_PATH;export LD\_LIBRARY\_PATH
</code>

## <a id="developing-solaris__section_15D24DFEFE024690A2652A4DC17EFFFB" class="no-quick-link"></a>Step 2. Compile C++ Clients and Dynamically Link to Them to Client Library

Version 5.9 of the *SUNpro* compiler is supported on Solaris. The linker switches vary according to whether you are statically linking to the client library.

To build and link a C++ client on Solaris, the compilation command line must include the appropriate arguments from this table.

<a id="developing-solaris__table_428EFC82036240CA974E3061E5D31CCF"></a>

| Argument                                                                                       | Explanation                                                |
|------------------------------------------------------------------------------------------------|------------------------------------------------------------|
| `-D_REENTRANT`                                                                                 | Required to compile Solaris programs in a thread-safe way. |
| `-xarch=v8plus`                                                                                | Enables 32-bit compilation.                                |
| `-xarch=v9`                                                                                    | Enables 64-bit compilation.                                |
| `-ldl`; `-lpthread`; `-lc`; `-lm`; `-lsocket`; `-lrt`; `-lnsl`; `-ldemangle`; `-lkstat`; `-lz` | Additional libraries.                                      |
| `-library=stlport4`                                                                            | Solaris library compilation.                               |
| `-I$ GEODE /include`                                                                           | Specifies the Geode include directory.                   |



## <a id="developing-solaris__section_81557A11797047A7941B47D44D1566AA" class="no-quick-link"></a>Step 3. Make Sure the Client Library Can Be Loaded

When a C++ application is not statically linked to the client library, the library must be dynamically loadable.

To verify that the client library is available for loading, make sure you have added the path *product-dir*`/lib` to the LD\_LIBRARY\_PATH environment variable, where *product-dir* is the path to the Geode product directory.
