---
title:  Nested Query Scopes
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

You can nest scopes by using nested `SELECT` statements. Names in an inner scope hide identical names in an outer scope.

In the query below, the inner `SELECT` creates a new scope, the positions of the current portfolio, inside the outer `SELECT` 's scope, `/portfolios`. This inner scope (the collection of entry values from the `/portfolios` region) is first searched for the `secId` element. The outer scope is searched only if the `secId` element is not found in the inner scope.

``` pre
IMPORT javaobject.Position;
SELECT DISTINCT * FROM /portfolios
   WHERE NOT
    (SELECT DISTINCT * FROM positions.values TYPE Position
       WHERE secId='YYY').isEmpty
```

This statement shows the outer scope in bold. The outer scope has all the attributes of a Portfolio in it.

<pre>
IMPORT javaobject.Position;
<b>SELECT DISTINCT * FROM /portfolios</b>
      <b>WHERE NOT</b>
        (SELECT DISTINCT * FROM positions.values TYPE Position
            WHERE secId='YYY')<b>.isEmpty</b>
</pre>

<a id="security__section_611591AEA6084A5ABB00DE3E19984498"></a>
Now the statement with the inner scope is shown in bold. The inner scope has all the attributes of a `Portfolio` in it (inherited from the outer scope), and all the attributes of a `Position` as well.

<pre>
IMPORT javaobject.Position;
SELECT DISTINCT * FROM /portfolios
   WHERE NOT
     (<b>SELECT DISTINCT * FROM positions.values TYPE Position
         WHERE secId='YYY</b>).isEmpty
</pre>


