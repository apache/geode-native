---
title:  SELECT Statement Query Results
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

The result of a `SELECT` statement is a collection that implements the `SelectResults` interface or it is `UNDEFINED`.

The `SelectResults` returned from the `SELECT` statement is either a collection of objects or a `Struct` collection containing the objects. (See also the API documentation for Query.)

Because a `SELECT` statement returns a result, it can be composed with other expressions like the following example:

``` pre
(SELECT DISTINCT * FROM /portfolios WHERE status = 'active').iterator
```

A collection of objects is returned in two cases:

-   When only one expression is specified by the projection list and that expression is not explicitly specified using the `fieldname:expression` syntax

-   When the `SELECT` list is \* and a single collection is specified in the FROM clause

<a id="security__table_D501DA045E684E00AEBD5FED5ED24853"></a>

<table>
<caption><span class="tablecap">Table 1. Matrix of SelectResults Contents Based on SELECT and FROM Clause Specifications</span></caption>
<colgroup>
<col width="25%" />
<col width="25%" />
<col width="25%" />
<col width="25%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><strong>SELECT</strong></p>
<p><strong>FROM</strong></p></td>
<td><strong>*</strong></td>
<td><strong>Single Expressions</strong></td>
<td><strong>Multiple Expressions</strong></td>
</tr>
<tr class="even">
<td><strong>single expression</strong></td>
<td>Objects</td>
<td><p>Objects. (<code class="ph codeph">Struct</code> if the projection specifies a field name.)</p></td>
<td><code class="ph codeph">Struct</code></td>
</tr>
<tr class="odd">
<td><strong>multiple expressions</strong></td>
<td><code class="ph codeph">Struct</code></td>
<td><p>Objects. (<code class="ph codeph">Struct</code> if the projection specifies a field name.)</p></td>
<td><code class="ph codeph">Struct</code></td>
</tr>
</tbody>
</table>

When a `Struct` is returned, the name of each field in the `Struct             `is determined as follows:

-   If a field is specified explicitly using the `fieldname:expression` syntax, the fieldname is used.
-   If the `SELECT` projection list is \* and an explicit iterator expression is used in the `FROM` clause, the iterator variable name is used as the field name.
-   If the field is associated with a region or attribute path expression, the last attribute name in the expression is used.

If names can not be decided based on these rules, arbitrary unique names are generated by the query processor.

These examples show how the projections and FROM clause expressions are applied.

<table>
<colgroup>
<col width="33%" />
<col width="33%" />
<col width="33%" />
</colgroup>
<tbody>
<tr class="odd">
<td><code class="ph codeph">SELECT &lt;*&gt; FROM &lt;single expression&gt;</code></td>
<td><code class="ph codeph">SELECT DISTINCT *</code>
<p><code class="ph codeph">FROM /portfolios</code></p>
<p><code class="ph codeph">WHERE status ='active'</code></p></td>
<td>Returns the <code class="ph codeph">Collection</code> of active portfolios objects.</td>
</tr>
<tr class="even">
<td><code class="ph codeph">SELECT &lt;single expression&gt; FROM                                 &lt;multiple expression&gt; </code>(without <code class="ph codeph">fieldName</code> mentioned)</td>
<td><code class="ph codeph">IMPORT javaobject.Position; </code> <code class="ph codeph">SELECT DISTINCT secId</code>
<p><code class="ph codeph">FROM /portfolios,</code></p>
<p>positions.values TYPE Position</p>
<p>WHERE status ='active'</p></td>
<td>Returns the <code class="ph codeph">Collection</code> of <code class="ph codeph">secIds</code> (<code class="ph codeph">CacheableString</code>
<p>objects) from the positions of active portfolios.</p></td>
</tr>
<tr class="odd">
<td><code class="ph codeph">SELECT &lt;single expression&gt; FROM</code>
<p><code class="ph codeph">&lt;multiple expression&gt;</code> (with <code class="ph codeph">fieldName</code> mentioned)</p></td>
<td><code class="ph codeph">IMPORT javaobject.Position;SELECT DISTINCT                                 secIdFieldName:secId</code>
<p><code class="ph codeph">FROM /portfolios, positions.values TYPE Position </code></p>
<p><code class="ph codeph">WHERE status ='active'</code></p></td>
<td>Returns <code class="ph codeph">struct&lt;secIdField:                                 CacheableString&gt;</code> for the active portfolios. (Compare to the results for the prior query.)</td>
</tr>
<tr class="even">
<td><code class="ph codeph">SELECT &lt;*&gt; FROM &lt;multiple expression&gt;</code></td>
<td><p><code class="ph codeph">IMPORT javaobject.Position; SELECT DISTINCT *</code></p>
<p><code class="ph codeph">FROM /portfolios, positions.values TYPE Position </code></p>
<p><code class="ph codeph">WHERE status = 'active'</code></p></td>
<td><p>Returns a <code class="ph codeph">Collection</code> of <code class="ph codeph">struct&lt;portfolios: Portfolio, values:                                     Position&gt;</code> for the active portfolios.</p></td>
</tr>
<tr class="odd">
<td><p><code class="ph codeph">SELECT &lt;multiple expression&gt; FROM &lt;multiple                                     expression&gt;</code></p></td>
<td><p><code class="ph codeph">IMPORT javaobject.Position;</code></p>
<p><code class="ph codeph">SELECT DISTINCT pflo, posn</code></p>
<p><code class="ph codeph">FROM /portfolios pflo, positions posn TYPE Position</code></p>
<p><code class="ph codeph">WHERE pflo.status = 'active'</code></p></td>
<td><p>Returns a <code class="ph codeph">Collection</code> of <code class="ph codeph">struct&lt;pflo:                                     Portfolio, posn: Position&gt;</code> for the active portfolios.</p></td>
</tr>
</tbody>
</table>


