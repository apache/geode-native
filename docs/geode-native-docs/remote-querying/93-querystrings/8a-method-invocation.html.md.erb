---
title:  Method Invocation
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

The query language supports method invocation inside query expressions.

<a id="security__section_9EB15A373E8C41E1A1C40981588A4DFB"></a>

The query processor maps attributes in query strings using the attribute rules described in [Object Attributes](../92-querylanguage/21-basic-region-access.html#security__section_789E081192A74B00B0E726EDC1C574C4). Methods declared to return `void` evaluate to `null` when invoked through the query processor.
If you know that the attribute name maps to a public method that takes no parameters, you can simply include the method name in the query string as an attribute. For example, `emps.isEmpty` is equivalent to `emps.isEmpty()` . In the following example, the query invokes `isEmpty` on positions, and returns the set of all portfolios with no positions.

``` pre
SELECT DISTINCT * FROM /portfolios WHERE positions.isEmpty
```

The client also supports the invocation of public methods with parameters. To invoke methods with parameters, include the method name as an attribute in the query string and provide the method arguments between parentheses. You can only use constants in the query strings.


