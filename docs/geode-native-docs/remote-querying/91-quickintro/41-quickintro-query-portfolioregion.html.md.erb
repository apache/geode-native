---
title:  Querying the Portfolios Region
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

The `portfolios` example continues, showing a sampling of specific queries.
The query results for the data are listed in the table. For the first several, the coding examples are included as well to show how to execute the queries using the API.

## <a id="running-native-client-xact__section_2EA54E860ACB48259484B555CA065E98" class="no-quick-link"></a>Get distinct positions from portfolios with at least a $25.00 market value

This query assigns iterator variable names to the collections in the FROM clause. For example, the variable `qryP` is the iterator for the entry values in the `portfolios` region. This variable is used in the second part of the FROM clause to access the values of the positions map for each entry value.

``` pre
Query string: 
SELECT DISTINCT posnVal
FROM /portfolios, positions.values posnVal TYPE Position
WHERE posnVal.mktValue >= 25.00

Results: 
Collection of Position instances with secId: xxx, xxy, bbb, bbc

```

## <a id="running-native-client-xact__section_F9C4640459F0406A922818B717D3EDB9" class="no-quick-link"></a>Retrieve all active portfolios

In the following example, a query response timeout parameter of 10 seconds is specified for the execute method to allow sufficient time for the operation to succeed.

``` pre
Query string: 
SELECT DISTINCT * FROM /portfolios WHERE status = ‘active’

Results: 
A collection of Portfolio objects for IDs 111, 222, and 333

Code: 
QueryServicePtr qrySvcPtr = cachePtr->getQueryService("examplePool");
QueryPtr qry = qrySvcPtr->newQuery(
               "SELECT DISTINCT * FROM /portfolios WHERE status = ‘active’");
SelectResultsPtr resultsPtr = qry->execute(10);
SelectResultsIterator iter = resultsPtr->getIterator();
while (iter.hasNext()) {
    PortfolioPtr portfolio = dynCast<PortfolioPtr >(iter.next());
}
```

## <a id="running-native-client-xact__section_71ED0337A0964501A6AE552B758058FC" class="no-quick-link"></a>Retrieve all active portfolios that have type xyz

The `type` attribute is passed to the query engine in double quotes to distinguish it from the query keyword of the same name. A query response timeout parameter of 10 seconds is specified for the execute method to allow sufficient time for the operation to succeed.

``` pre
Query string: 
SELECT DISTINCT * FROM /portfolios
WHERE status = 'active' AND "type" = 'xyz'

Results: 
A collection of Portfolio objects for IDs 111 and 222

Code: 
QueryServicePtr qrySvcPtr = cachePtr->getQueryService("examplePool");
QueryPtr qry = qrySvcPtr->newQuery("SELECT DISTINCT * FROM
               /portfolios WHERE status = 'active' and \"type\"='xyz'");
SelectResultsPtr results = qry->execute(10);
SelectResultsIterator iter = results->getIterator();
while (iter.hasNext()) {
    PortfolioPtr portfolio = dynCast<PortfolioPtr >(iter.next());
}
```

## <a id="running-native-client-xact__section_4F13C92EDBCA4F04BE37C87D44AD7D49" class="no-quick-link"></a>Get the ID and status of all portfolios with positions in secId 'yyy'

``` pre
Query string: 
SELECT DISTINCT id, status FROM /portfolios
WHERE NOT (SELECT DISTINCT * FROM positions.values posnVal TYPE
Position WHERE posnVal.secId='yyy').isEmpty

Results: 
A collection of Struct instances, each containing an id field and a status field. 
For this data, the collection length is 1 and the Struct contains data
from the entry with id 222.


Code: 
QueryServicePtr qrySrvPtr = cachePtr->getQueryService("examplePool");
QueryPtr qry = qrySvcPtr->newQuery(
   "import javaobject.Position; SELECT DISTINCT ID, status FROM "
   "/portfolios WHERE NOT (SELECT DISTINCT * FROM positions.values"
   "posnVal TYPE Position WHERE posnVal.secId='DELL').isEmpty");
SelectResultsPtr results = qry->execute(10);
SelectResultsIterator iter = results->getIterator();
while (iter.hasNext()) {
    Struct * si = (Struct *) iter.next().ptr();
    SerializablePtr id = si->operator[]("ID");
    SerializablePtr status = si->operator[]("status");
    printf("\nID=%s, status=%s", id->toString()->asChar(), status->toString()->asChar());
}
```
