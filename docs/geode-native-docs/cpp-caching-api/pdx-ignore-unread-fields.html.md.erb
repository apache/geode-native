---
title:  Configuring PDX to Ignore Unread Fields During Deserialization
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

Use the `setPdxIgnoreUnreadFields` API to control whether PDX ignores fields that were unread during deserialization.

The default is to preserve unread fields by including their data during serialization. However, if you configure the cache to ignore unread fields then their data will be lost during serialization.

You should only set this attribute to `true` if you know this member will only be reading cache data. In this use case you do not need to pay the cost of preserving unread fields since you will never reserialize the PDX data.

For example:

``` pre
CacheFactoryPtr cfPtr = CacheFactory::createCacheFactory(PropertiesObj);
cfPtr->setPdxReadSerialized(tue);
cfPtr->setPdxIgnoreUnreadFields(false);
cachePtr = cfPtr->create();
```


