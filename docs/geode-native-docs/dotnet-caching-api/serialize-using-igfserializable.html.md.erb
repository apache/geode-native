---
title:  Serialize with the IGeodeSerializable Interface
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

The .NET `IGeodeSerializable` interface provides fast and compact data serialization.

-   **[Generic and Custom Serializable Types](serializable-types.html)**

    All built-in generics are automatically registered at initialization. You have a couple of options for complex key types.

-   **[How Serialization Works with IGeodeSerializable](how-igfserializable-works.html)**

    When your application puts an object into the cache for distribution, Geode serializes the data by taking these steps.

-   **[Implement the IGeodeSerializable Interface](implementing-igfserializable.html)**

    To store your own data types in the cache, you implement the Geode `IGeodeSerializable` interface.

-   **[Register the Type](registering-the-type.html)**

    To use the `BankAccount` type, you must register it with the type system. Then, when an incoming stream contains a `BankAccount`, it can be manufactured from the associated `TypeFactoryMethod.`


